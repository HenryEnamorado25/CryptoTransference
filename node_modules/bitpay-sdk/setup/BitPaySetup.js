var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
var fs = require('fs');
var request = require('request');
var BitPaySDK = require('../src/index');
var readline = require('readline');
var privateKeyPath = __dirname + '/../secure/private_key';
var ConfFilePath = __dirname + '/../secure/BitPay.config.json';
var keyUtils = new BitPaySDK.KeyUtils();
var keyPair;
var ecKey;
var environment;
var storeFile = true;
var apiUrl;
var merchantToken;
var merchantPairCode;
var payrollToken;
var payrollPairCode;
var keyPath = '';
var keyPlain = '';
var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
var main = function () {
    selectEnv();
};
var selectEnv = function () { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        try {
            console.log("Select target environment:");
            rl.question('Press T for testing or P for production: \n', function (answer) { return __awaiter(_this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = answer.toLowerCase();
                            switch (_a) {
                                case 't': return [3 /*break*/, 1];
                                case 'p': return [3 /*break*/, 3];
                            }
                            return [3 /*break*/, 5];
                        case 1:
                            environment = 'Test';
                            return [4 /*yield*/, setEnv(environment)];
                        case 2:
                            _b.sent();
                            selectCreateKey();
                            return [3 /*break*/, 6];
                        case 3:
                            environment = 'Prod';
                            return [4 /*yield*/, setEnv(environment)];
                        case 4:
                            _b.sent();
                            selectCreateKey();
                            return [3 /*break*/, 6];
                        case 5:
                            selectEnv();
                            _b.label = 6;
                        case 6: return [2 /*return*/];
                    }
                });
            }); });
        }
        catch (e) {
            console.log(e);
        }
        return [2 /*return*/];
    });
}); };
var setEnv = function (env) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (env == 'Test') {
            apiUrl = 'https://test.bitpay.com';
            return [2 /*return*/];
        }
        apiUrl = 'https://bitpay.com';
        return [2 /*return*/];
    });
}); };
var selectCreateKey = function () { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        try {
            console.log("Enter your private key or its location");
            rl.question('Or press Enter to generate a brand new key: ', function (answer) { return __awaiter(_this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = answer.toLowerCase();
                            switch (_a) {
                                case '': return [3 /*break*/, 1];
                            }
                            return [3 /*break*/, 3];
                        case 1: return [4 /*yield*/, createNewKey()];
                        case 2:
                            _b.sent();
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, loadKey(answer)];
                        case 4:
                            _b.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        }
        catch (e) {
            console.log(e);
        }
        return [2 /*return*/];
    });
}); };
var createNewKey = function () { return __awaiter(_this, void 0, void 0, function () {
    var e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, , 4]);
                console.log("Generating private key... \n");
                keyPair = keyUtils.generate_keypair();
                ecKey = keyUtils.load_keypair(keyPair);
                return [4 /*yield*/, sleep(2000)];
            case 1:
                _a.sent();
                console.log('Generated Private Key: ' + ecKey.getPrivate("hex"));
                console.log('With Public Key: ' + ecKey.getPublic("hex") + '\n');
                return [4 /*yield*/, storeKey()];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                e_1 = _a.sent();
                console.log(e_1);
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); };
var loadKey = function (privateKey) { return __awaiter(_this, void 0, void 0, function () {
    var e_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 5, , 6]);
                if (!fs.existsSync(privateKey)) return [3 /*break*/, 2];
                console.log("Loading private key... \n");
                return [4 /*yield*/, sleep(2000)];
            case 1:
                _a.sent();
                ecKey = keyUtils.load_keypair(fs.readFileSync(privateKey).toString().trim());
                console.log('Loaded Private Key: ' + ecKey.getPrivate("hex"));
                console.log('With Public Key: ' + keyUtils.getPublicKeyFromPrivateKey(ecKey));
                console.log('From: ' + privateKey);
                console.log("\n");
                selectTokens();
                return [3 /*break*/, 4];
            case 2:
                ecKey = keyUtils.load_keypair(privateKey);
                console.log("Loading private key... \n");
                return [4 /*yield*/, sleep(2000)];
            case 3:
                _a.sent();
                console.log('Loaded Private Key: ' + ecKey.getPrivate("hex"));
                console.log('With Public Key: ' + keyUtils.getPublicKeyFromPrivateKey(ecKey));
                console.log('From: ' + privateKey);
                console.log("\n");
                selectTokens();
                _a.label = 4;
            case 4: return [3 /*break*/, 6];
            case 5:
                e_2 = _a.sent();
                console.log(e_2);
                return [3 /*break*/, 6];
            case 6: return [2 /*return*/];
        }
    });
}); };
var storeKey = function () { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        try {
            if (!fs.existsSync(__dirname + '/../secure')) {
                fs.mkdirSync(__dirname + '/../secure');
            }
            console.log("Select the way you want to store your private key:");
            rl.question('Press F for storing in a text file or T for plain text in your config file: ', function (answer) { return __awaiter(_this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = answer.toLowerCase();
                            switch (_a) {
                                case 'f': return [3 /*break*/, 1];
                                case 't': return [3 /*break*/, 3];
                            }
                            return [3 /*break*/, 5];
                        case 1:
                            storeFile = true;
                            keyPath = privateKeyPath + '_' + environment.toLowerCase() + '.key';
                            console.log("Saving private key... \n");
                            sleep(500);
                            fs.writeFile(privateKeyPath + '_' + environment.toLowerCase() + '.key', ecKey.getPrivate("hex"), { mode: 493 }, function (err) {
                                if (err)
                                    throw err;
                                console.log('Private key saved in file: ' + keyPath + '\n');
                            });
                            return [4 /*yield*/, sleep(1000)];
                        case 2:
                            _b.sent();
                            selectTokens();
                            return [3 /*break*/, 6];
                        case 3:
                            storeFile = false;
                            keyPlain = ecKey.getPrivate("hex");
                            console.log("Saving private key... \n");
                            return [4 /*yield*/, sleep(1000)];
                        case 4:
                            _b.sent();
                            selectTokens();
                            return [3 /*break*/, 6];
                        case 5:
                            storeKey();
                            _b.label = 6;
                        case 6: return [2 /*return*/];
                    }
                });
            }); });
        }
        catch (e) {
            console.log(e);
        }
        return [2 /*return*/];
    });
}); };
var selectTokens = function () { return __awaiter(_this, void 0, void 0, function () {
    var _this = this;
    return __generator(this, function (_a) {
        try {
            console.log("Select the tokens that you would like to request:");
            rl.question('Press M for merchant, P for Payroll or B for both: \n', function (answer) { return __awaiter(_this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = answer.toLowerCase();
                            switch (_a) {
                                case 'm': return [3 /*break*/, 1];
                                case 'p': return [3 /*break*/, 1];
                                case 'b': return [3 /*break*/, 1];
                            }
                            return [3 /*break*/, 4];
                        case 1:
                            console.log("Requesting tokens... \n");
                            return [4 /*yield*/, sleep(500)];
                        case 2:
                            _b.sent();
                            return [4 /*yield*/, requestTokens(answer)];
                        case 3:
                            _b.sent();
                            return [3 /*break*/, 5];
                        case 4:
                            selectTokens();
                            _b.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        }
        catch (e) {
            console.log(e);
        }
        return [2 /*return*/];
    });
}); };
var requestTokens = function (option) { return __awaiter(_this, void 0, void 0, function () {
    var reqMerchant, reqPayroll, sin, headers, facade, postData, options, facade, postData, options, e_3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 6, , 7]);
                reqMerchant = false;
                reqPayroll = false;
                switch (option.toLowerCase()) {
                    case 'm':
                        reqMerchant = true;
                        reqPayroll = false;
                        break;
                    case 'p':
                        reqMerchant = false;
                        reqPayroll = true;
                        break;
                    case 'b':
                        reqMerchant = true;
                        reqPayroll = true;
                        break;
                }
                sin = keyUtils.get_sin_from_key(ecKey);
                headers = {
                    "x-accept-version": "2.0.0",
                    "Content-type": "application/json"
                };
                if (!reqMerchant) return [3 /*break*/, 2];
                console.log("Requesting Merchant token... \n");
                facade = 'merchant';
                postData = { id: sin, facade: facade };
                options = {
                    url: apiUrl + '/tokens',
                    method: 'POST',
                    body: postData,
                    headers: headers,
                    json: true
                };
                request(options, function (error, response, body) {
                    var jsonResponse = JSON.parse(JSON.stringify(body.data[0]));
                    merchantToken = jsonResponse['token'];
                    merchantPairCode = jsonResponse['pairingCode'];
                });
                return [4 /*yield*/, sleep(2000)];
            case 1:
                _a.sent();
                _a.label = 2;
            case 2:
                if (!reqPayroll) return [3 /*break*/, 4];
                console.log("Requesting Payroll token... \n");
                facade = 'payroll';
                postData = { id: sin, facade: facade };
                options = {
                    url: apiUrl + '/tokens',
                    method: 'POST',
                    body: postData,
                    headers: headers,
                    json: true
                };
                request(options, function (error, response, body) {
                    var jsonResponse = JSON.parse(JSON.stringify(body.data[0]));
                    payrollToken = jsonResponse['token'];
                    payrollPairCode = jsonResponse['pairingCode'];
                });
                return [4 /*yield*/, sleep(2000)];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4: return [4 /*yield*/, updateConfigFile()];
            case 5:
                _a.sent();
                return [3 /*break*/, 7];
            case 6:
                e_3 = _a.sent();
                console.log(e_3);
                return [3 /*break*/, 7];
            case 7: return [2 /*return*/];
        }
    });
}); };
var updateConfigFile = function () { return __awaiter(_this, void 0, void 0, function () {
    var confObj;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (environment == 'Test') {
                    confObj = {
                        'BitPayConfiguration': {
                            "Environment": "Test",
                            "EnvConfig": {
                                "Test": {
                                    "PrivateKeyPath": keyPath,
                                    "PrivateKey": keyPlain,
                                    "ApiTokens": {
                                        "merchant": merchantToken,
                                        "payroll": payrollToken
                                    }
                                }
                            }
                        }
                    };
                }
                else {
                    confObj = {
                        'BitPayConfiguration': {
                            "Environment": "Prod",
                            "EnvConfig": {
                                "Prod": {
                                    "PrivateKeyPath": keyPath,
                                    "PrivateKey": keyPlain,
                                    "ApiTokens": {
                                        "merchant": merchantToken,
                                        "payroll": payrollToken
                                    }
                                }
                            }
                        }
                    };
                }
                confObj['BitPayConfiguration']['EnvConfig'][environment] = {
                    "PrivateKeyPath": keyPath,
                    "PrivateKey": keyPlain,
                    "ApiTokens": {
                        "merchant": merchantToken,
                        "payroll": payrollToken
                    }
                };
                fs.writeFile(ConfFilePath, JSON.stringify(confObj, null, 4), function (err) {
                    if (err)
                        throw err;
                    console.log('Generated configuration file');
                    console.log('And saved in file: ' + ConfFilePath + '\n');
                });
                return [4 /*yield*/, sleep(5000)];
            case 1:
                _a.sent();
                console.log('Configuration generated successfully! \n');
                console.log("To complete your setup, Go to " + apiUrl + "/dashboard/merchant/api-tokens and pair this client with your merchant account using the pairing codes:");
                if (merchantToken) {
                    console.log(merchantPairCode + " for the Merchant facade.");
                }
                if (payrollToken) {
                    console.log(payrollPairCode + " for the Payroll facade ONLY if you have requested access for this role.");
                }
                process.exit();
                return [2 /*return*/];
        }
    });
}); };
function sleep(ms) {
    return new Promise(function (resolve) {
        setTimeout(resolve, ms);
    });
}
main();
//# sourceMappingURL=BitPaySetup.js.map