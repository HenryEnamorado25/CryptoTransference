"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyUtils = void 0;
var elliptic = require("elliptic");
var bs58 = require("bs58");
var crypto = require("crypto");
var ec = new elliptic.ec('secp256k1');
var KeyUtils = /** @class */ (function () {
    function KeyUtils() {
    }
    KeyUtils.prototype.generate_keypair = function () {
        var kp = ec.genKeyPair();
        return kp;
    };
    KeyUtils.prototype.load_keypair = function (buf) {
        return ec.keyFromPrivate(buf);
    };
    KeyUtils.prototype.get_sin_from_key = function (kp) {
        var pk = Buffer.from(kp.getPublic().encodeCompressed());
        var version = this.get_version_from_compressed_key(pk);
        var checksum = this.get_checksum_from_version(version);
        return bs58.encode(Buffer.concat([version, checksum]));
    };
    KeyUtils.prototype.signOrig = function (data, kp) {
        var digest = crypto
            .createHash('sha256')
            .update(data)
            .digest();
        return Buffer.from(kp.sign(digest).toDER());
    };
    KeyUtils.prototype.sign = function (data, privkey) {
        var dataBuffer = Buffer.from(data, 'utf-8');
        var hashBuffer = crypto
            .createHash('sha256')
            .update(dataBuffer).digest();
        return Buffer.from(privkey.sign(hashBuffer).toDER()).toString("hex");
    };
    KeyUtils.prototype.getPublicKeyFromPrivateKey = function (privkey) {
        var ecKey = this.load_keypair(privkey);
        return ecKey.getPublic().encodeCompressed("hex");
    };
    ;
    KeyUtils.prototype.get_version_from_compressed_key = function (pk) {
        var sh2 = crypto
            .createHash('sha256')
            .update(pk)
            .digest();
        var rp = crypto
            .createHash('ripemd160')
            .update(sh2)
            .digest();
        return Buffer.concat([
            Buffer.from('0F', 'hex'),
            Buffer.from('02', 'hex'),
            rp,
        ]);
    };
    KeyUtils.prototype.get_checksum_from_version = function (version) {
        var h1 = crypto
            .createHash('sha256')
            .update(version)
            .digest();
        var h2 = crypto
            .createHash('sha256')
            .update(h1)
            .digest();
        return h2.slice(0, 4);
    };
    return KeyUtils;
}());
exports.KeyUtils = KeyUtils;
//# sourceMappingURL=KeyUtils.js.map