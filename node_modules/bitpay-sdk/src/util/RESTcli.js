"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RESTcli = void 0;
var index_1 = require("../index");
var qs = require("querystring");
var rp = require("request-promise");
var _ = require("underscore");
var BitPayException_1 = require("../Exceptions/BitPayException");
var RESTcli = /** @class */ (function () {
    function RESTcli(environment, ecKey) {
        this._keyUtils = new index_1.KeyUtils();
        this._ecKey = ecKey;
        this._baseUrl = environment.toUpperCase() == index_1.Env.Test ? index_1.Env.TestUrl : index_1.Env.ProdUrl;
        this.init();
    }
    RESTcli.prototype.init = function () {
        try {
            this._identity = this._keyUtils.getPublicKeyFromPrivateKey(this._ecKey);
            this._commonOptions = {
                headers: {
                    'x-accept-version': index_1.Env.BitpayApiVersion,
                    'x-bitpay-plugin-info': index_1.Env.BitpayPluginInfo,
                    'x-bitpay-api-frame': index_1.Env.BitpayApiFrame,
                    'x-bitpay-api-frame-version': index_1.Env.BitpayApiFrameVersion,
                    'Content-Type': 'application/json'
                },
                json: true
            };
        }
        catch (e) {
            throw new BitPayException_1.default(null, "RESTcli init failed : " + e.message);
        }
    };
    RESTcli.prototype.getSignedHeaders = function (uri, formData) {
        return {
            'x-identity': this._identity,
            'x-signature': this._keyUtils.sign(uri + formData, this._ecKey),
        };
    };
    RESTcli.prototype.post = function (uri, formData, signatureRequired) {
        if (formData === void 0) { formData = {}; }
        if (signatureRequired === void 0) { signatureRequired = true; }
        return __awaiter(this, void 0, void 0, function () {
            var _fullURL, _formData, _options, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        _fullURL = this._baseUrl + uri;
                        _formData = JSON.stringify(formData);
                        _options = JSON.parse(JSON.stringify(this._commonOptions));
                        _options.uri = _fullURL;
                        _options.body = JSON.parse(JSON.stringify(formData));
                        if (signatureRequired) {
                            _.extend(_options.headers, this.getSignedHeaders(_fullURL, _formData));
                        }
                        return [4 /*yield*/, rp.post(_options).then(function (resp) { return resp; }).then(function (resp) {
                                return _this.responseToJsonString(resp);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        throw new BitPayException_1.default(null, "RESTcli POST failed : " + e_1.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RESTcli.prototype.get = function (uri, parameters, signatureRequired) {
        if (parameters === void 0) { parameters = {}; }
        if (signatureRequired === void 0) { signatureRequired = true; }
        return __awaiter(this, void 0, void 0, function () {
            var _fullURL, _options, _query, e_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        _fullURL = this._baseUrl + uri;
                        _options = JSON.parse(JSON.stringify(this._commonOptions));
                        _query = '?' + qs.stringify(parameters);
                        _options.uri = _fullURL;
                        _options.qs = parameters;
                        if (signatureRequired) {
                            _.extend(_options.headers, this.getSignedHeaders(_fullURL, _query));
                        }
                        return [4 /*yield*/, rp.get(_options).then(function (resp) { return resp; }).then(function (resp) {
                                return _this.responseToJsonString(resp);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_2 = _a.sent();
                        throw new BitPayException_1.default(null, "RESTcli GET failed : " + e_2.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RESTcli.prototype.delete = function (uri, parameters) {
        if (parameters === void 0) { parameters = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _fullURL, _options, _query, e_3;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        _fullURL = this._baseUrl + uri;
                        _options = JSON.parse(JSON.stringify(this._commonOptions));
                        _query = '?' + qs.stringify(parameters);
                        _.extend(_options.headers, this.getSignedHeaders(_fullURL, _query));
                        _options.uri = _fullURL;
                        _options.qs = parameters;
                        return [4 /*yield*/, rp.delete(_options).then(function (resp) { return resp; }).then(function (resp) {
                                return _this.responseToJsonString(resp);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_3 = _a.sent();
                        throw new BitPayException_1.default(null, "RESTcli DELETE failed : " + e_3.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RESTcli.prototype.update = function (uri, formData) {
        if (formData === void 0) { formData = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _fullURL, _formData, _options, e_4;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        _fullURL = this._baseUrl + uri;
                        _formData = JSON.stringify(formData);
                        _options = JSON.parse(JSON.stringify(this._commonOptions));
                        _.extend(_options.headers, this.getSignedHeaders(_fullURL, _formData));
                        _options.uri = _fullURL;
                        _options.body = formData;
                        return [4 /*yield*/, rp.put(_options).then(function (resp) { return resp.data; }).then(function (resp) {
                                return _this.responseToJsonString(resp);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_4 = _a.sent();
                        throw new BitPayException_1.default(null, "RESTcli UPDATE failed : " + e_4.message);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RESTcli.prototype.responseToJsonString = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var responsObj, message_1;
            return __generator(this, function (_a) {
                try {
                    if (response == null) {
                        throw new BitPayException_1.default(null, "Error: HTTP response is null");
                    }
                    responsObj = JSON.parse(JSON.stringify(response));
                    if (responsObj.hasOwnProperty("error")) {
                        throw new BitPayException_1.default(null, "Error: " + responsObj["error"]);
                    }
                    else if (responsObj.hasOwnProperty("errors")) {
                        message_1 = '';
                        responsObj["errors"].forEach(function (error) {
                            message_1 += "\n" + error.toString();
                        });
                        throw new BitPayException_1.default(null, "Errors: " + message_1);
                    }
                    if (responsObj.hasOwnProperty("success")) {
                        return [2 /*return*/, JSON.stringify(responsObj["success"])];
                    }
                    if (responsObj.hasOwnProperty("data")) {
                        return [2 /*return*/, JSON.stringify(responsObj["data"])];
                    }
                    return [2 /*return*/, JSON.stringify(responsObj)];
                }
                catch (e) {
                    throw new BitPayException_1.default("failed to retrieve HTTP response body : " + e.message);
                }
                return [2 /*return*/];
            });
        });
    };
    return RESTcli;
}());
exports.RESTcli = RESTcli;
//# sourceMappingURL=RESTcli.js.map